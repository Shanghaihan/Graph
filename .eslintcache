[{"D:\\graph\\src\\index.tsx":"1","D:\\graph\\src\\reportWebVitals.ts":"2","D:\\graph\\src\\App.tsx":"3","D:\\graph\\src\\component\\DemoScatter.tsx":"4","D:\\graph\\src\\component\\DemoGraph.tsx":"5","D:\\graph\\src\\component\\Graph.tsx":"6"},{"size":499,"mtime":1608024668444,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1607865297869,"results":"9","hashOfConfig":"8"},{"size":1488,"mtime":1608119748440,"results":"10","hashOfConfig":"8"},{"size":1439,"mtime":1608186940715,"results":"11","hashOfConfig":"8"},{"size":1649,"mtime":1608119450812,"results":"12","hashOfConfig":"8"},{"size":533,"mtime":1608087681898,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1hue34o",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"D:\\graph\\src\\index.tsx",[],["30","31"],"D:\\graph\\src\\reportWebVitals.ts",[],"D:\\graph\\src\\App.tsx",["32","33","34"],"import axios from 'axios';\nimport React, {useEffect, useMemo, useReducer, useState } from 'react';\nimport './App.css';\nimport  { NetWork, Scatter} from './component/Graph';\n\nfunction reducer(state:any,action:any) {\n    switch (action.type) {\n        case 'changeState':\n            return action.currentGraph\n        default:\n            return state;\n    }\n}\nconst useData =(action:any)=>{\n    const [data,setData] = useState([]);\n    const [pending,setPending] = useState(true);\n    useEffect(() => {\n        const getData = async()=>{\n            setPending(true);\n            const res = await (await axios.get('../struc.json')).data;\n            setPending(false);\n            res.forEach((ele:any)=>{\n                ele.cluster = \"type\"+ele.cluster  ;\n            });\n            setData(res); \n \n            action({\n                type:'changeState',\n                currentGraph:res[10]\n            }) \n        }\n        getData();\n        return () => {\n        }\n    },[]) \n    return {data,pending};\n}\nexport const context = React.createContext({});\n\nfunction App() {\n    const [currentGraph,dispatch] = useReducer<any>(reducer,{})\n    const {data,pending} = useData(dispatch);\n    return (\n        <div className=\"App\">\n            <context.Provider value={{ \n                data,\n                currentGraph,dispatch,\n            }}>\n                <Scatter/>\n                <NetWork/>\n            </context.Provider>     \n        </div>\n    );\n}\n\nexport default App;\n","D:\\graph\\src\\component\\DemoScatter.tsx",["35"],"D:\\graph\\src\\component\\DemoGraph.tsx",["36"],"import React, { useContext } from 'react'\r\nimport G6 from '@antv/g6';\r\nimport ReactDOM from 'react-dom';\r\nimport { useEffect } from 'react';\r\nimport { context } from '../App';\r\nconst DemoGraph:React.FC = ()=>{\r\n    const ref = React.useRef<HTMLDivElement>(null);\r\n    //@ts-ignore\r\n    const {currentGraph} = useContext(context);\r\n    const data = {\r\n        // 点集\r\n        nodes: currentGraph==null?[]:currentGraph.nodes,\r\n        // 边集\r\n        edges: currentGraph==null?[]:currentGraph.edgess,\r\n    };\r\n    //@ts-ignore \r\n    var graph:any = null;\r\n    useEffect(() => {\r\n        if(!graph){\r\n           ref.current?.firstChild?.remove();\r\n            graph = new G6.Graph({\r\n                //@ts-ignore    \r\n                container: ReactDOM.findDOMNode(ref.current), // String | HTMLElement，必须，在 Step 1 中创建的容器 id 或容器本身\r\n                width: 600, // Number，必须，图的宽度\r\n                height: 600, // Number，必须，图的高度\r\n                layout: {\r\n                    type: 'concentric',\r\n                    center: [ 300, 300 ],     // 可选，默认为图的中心\r\n                    linkDistance: 50,         // 可选，边长\r\n                    preventOverlap: true,     // 可选，必须配合 nodeSize\r\n                    nodeSize: 10,             // 可选\r\n                    minNodeSpacing:15\r\n                }\r\n            }); \r\n            graph.data(data); // 读取 Step 2 中的数据源到图上\r\n            graph.render()// 渲染图\r\n        }  \r\n    },[data])\r\n    return(\r\n        <div ref={ref}></div>    \r\n    )\r\n};\r\nexport default DemoGraph;","D:\\graph\\src\\component\\Graph.tsx",["37","38","39","40","41"],"import axios from 'axios';\r\nimport React, { useContext, useEffect,useState } from 'react'\r\nimport { context } from '../App';\r\nimport DemoGraph from './DemoGraph';\r\nimport DemoScatter from './DemoScatter';\r\n\r\n\r\n\r\n\r\nexport const Scatter:React.FC = ()=>{\r\n    return(\r\n        <div style={{width:'600px',height:'600px'}}>\r\n            <DemoScatter/>\r\n        </div>\r\n    );\r\n}\r\nexport const NetWork:React.FC = ()=>{\r\n    return(\r\n        <div style={{width:'600px',height:'600px'}}>\r\n            <DemoGraph/>\r\n        </div>\r\n    )\r\n}\r\n",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":2,"column":27,"nodeType":"48","messageId":"49","endLine":2,"endColumn":34},{"ruleId":"50","severity":1,"message":"51","line":35,"column":7,"nodeType":"52","endLine":35,"endColumn":9,"suggestions":"53"},{"ruleId":"46","severity":1,"message":"54","line":42,"column":17,"nodeType":"48","messageId":"49","endLine":42,"endColumn":24},{"ruleId":"46","severity":1,"message":"55","line":9,"column":12,"nodeType":"48","messageId":"49","endLine":9,"endColumn":24},{"ruleId":"50","severity":1,"message":"56","line":21,"column":21,"nodeType":"57","endLine":34,"endColumn":15},{"ruleId":"46","severity":1,"message":"58","line":1,"column":8,"nodeType":"48","messageId":"49","endLine":1,"endColumn":13},{"ruleId":"46","severity":1,"message":"59","line":2,"column":17,"nodeType":"48","messageId":"49","endLine":2,"endColumn":27},{"ruleId":"46","severity":1,"message":"60","line":2,"column":29,"nodeType":"48","messageId":"49","endLine":2,"endColumn":38},{"ruleId":"46","severity":1,"message":"61","line":2,"column":39,"nodeType":"48","messageId":"49","endLine":2,"endColumn":47},{"ruleId":"46","severity":1,"message":"62","line":3,"column":10,"nodeType":"48","messageId":"49","endLine":3,"endColumn":17},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"@typescript-eslint/no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'action'. Either include it or remove the dependency array. If 'action' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["65"],"'pending' is assigned a value but never used.","'currentGraph' is assigned a value but never used.","Assignments to the 'graph' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","'axios' is defined but never used.","'useContext' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'context' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"66","fix":"67"},"Update the dependencies array to be: [action]",{"range":"68","text":"69"},[982,984],"[action]"]